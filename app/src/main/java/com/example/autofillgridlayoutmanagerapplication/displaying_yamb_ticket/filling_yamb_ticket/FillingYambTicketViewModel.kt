package com.example.autofillgridlayoutmanagerapplication.displaying_yamb_ticket.filling_yamb_ticket

import android.util.Log
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import com.example.autofillgridlayoutmanagerapplication.database.*
import com.example.autofillgridlayoutmanagerapplication.database.entities_and_data_classes.Cubes
import com.example.autofillgridlayoutmanagerapplication.database.entities_and_data_classes.DataAboutRolledCubes
import com.example.autofillgridlayoutmanagerapplication.database.entities_and_data_classes.GameStat
import com.example.autofillgridlayoutmanagerapplication.database.entities_and_data_classes.PopUpsData
import com.example.autofillgridlayoutmanagerapplication.displaying_yamb_ticket.filling_yamb_ticket.recyclerAdapter.ItemInGame
import com.example.autofillgridlayoutmanagerapplication.enums_and_interfaces.IHasObservers
import com.example.autofillgridlayoutmanagerapplication.enums_and_interfaces.IViewModelForDisplayingYambTicket
import com.example.autofillgridlayoutmanagerapplication.list_and_game_data_modifiers.GameDataModifier
import com.example.autofillgridlayoutmanagerapplication.list_and_game_data_modifiers.ListOfItemsModifier
import io.reactivex.Completable
import io.reactivex.Single
import io.reactivex.android.schedulers.AndroidSchedulers
import io.reactivex.disposables.CompositeDisposable
import io.reactivex.schedulers.Schedulers
import java.text.SimpleDateFormat
import java.util.*



class FillingYambTicketViewModel(val database  :GamesPlayedDatabase) : ViewModel() , IViewModelForDisplayingYambTicket, IHasObservers {


    private val  isPopUpForEnteringValuesEnabled_ : MutableLiveData<Boolean> = MutableLiveData(false)
    val isPopUpForEnteringValuesEnabled : LiveData<Boolean>
        get()= isPopUpForEnteringValuesEnabled_

    private val itemsInRecycler_ : MutableLiveData<List<ItemInGame>> = MutableLiveData()
    val itemsInRecycler : LiveData<List<ItemInGame>>
        get() = itemsInRecycler_

    private val isPopUpForFinishedGameEnabled_ = MutableLiveData<Boolean>(false)
    val  isPopUpForFinishedGameEnabled : LiveData<Boolean>
        get() = isPopUpForFinishedGameEnabled_

    private val showToastForGameSaved_ = MutableLiveData<Boolean>(false)
    val showToastForGameSaved : LiveData<Boolean>
        get() = showToastForGameSaved_


    private var aheadCall = false
    private val compositeDisposable = CompositeDisposable()
    private var positioOfLastItemClickedTemp = 0
    private var idOfLastInsertedGameStat : Long = 0

    init {
        displayStartingItems()
      //displayStartingTestItems()  //for testing the end of game

    }

    private fun savePlayedColumns(){
        compositeDisposable.add(
            Completable.fromAction {
                val listOfObjectsRepresentingColumns = ListOfItemsModifier.getListWithFourObjectsEachRepresentingOneColumn( itemsInRecycler_.value!!,idOfLastInsertedGameStat)
                database.getColumnDao().insertColumns(
                    listOfObjectsRepresentingColumns[0],
                    listOfObjectsRepresentingColumns[1],
                    listOfObjectsRepresentingColumns[2],
                    listOfObjectsRepresentingColumns[3],
                    listOfObjectsRepresentingColumns[4]
                )
            }.subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(
                    {
                        showToastMessage()
                        displayStartingItems()
                    }
                ){
                    throw  it
                }
        )
    }
    fun saveGameStatsAndPlayedColumnsAndDisplayStartingItems(){
        compositeDisposable.add(
            Completable.fromAction {
                val calendar = Calendar.getInstance()
                val dateFormat = SimpleDateFormat("MM/dd/yyyy", Locale.ITALY)
                val date = dateFormat.format(calendar.time)
                val totalPoints = GameDataModifier.getTotalPoints(itemsInRecycler_.value!!)
                this.idOfLastInsertedGameStat = database.getGameStatsDao().insertGameStats(GameStat(0, date, totalPoints)) //id is autogenerated
            }.subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(){
                    savePlayedColumns()
                }
        )
    }
    fun makeChangesAfterValueIsInserted(valueOfItemPicked: Int){
       itemsInRecycler_.value = ListOfItemsModifier.getModifiedListWhenValueInserted(position = positioOfLastItemClickedTemp,insertedValue =  valueOfItemPicked,currentListOfItems = itemsInRecycler_.value!!)
        checkIsGameFinished()
        enableButtonForRollingDices()
    }
    private fun checkIsGameFinished(){
        if(GameDataModifier.isGameFinished(itemsInRecycler_.value!!))
            saveTotalPointsData()
    }
    private fun unFreezeAllItems(){
        if(aheadCall)
            this.itemsInRecycler_.value = ListOfItemsModifier.getAheadCallPressedList(itemsInRecycler_.value!!)
        else
            this.itemsInRecycler_.value = ListOfItemsModifier.unfreezeItems(itemsInRecycler_.value!!)
    }
    private fun saveTotalPointsData(){
        compositeDisposable.add(
            Completable.fromAction {
                database.getPopUpsDataDao().insertPopUpsData(PopUpsData(id = 1,positionOfItemClicked = 0,totalPoints = GameDataModifier.getTotalPoints(itemsInRecycler_.value!!)))
            }.subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(){
                    Log.i("popUpData","Data about total points saved")
                    isPopUpForFinishedGameEnabled_.value =  !isPopUpForFinishedGameEnabled_.value!!
                }
        )
    }
    private fun enableButtonForRollingDices(){
        compositeDisposable.add(
            Completable.fromAction {
                database.getDataAboutRolledCubesDao().insertData(
                    DataAboutRolledCubes(
                        dataRolledCubesId = 1,
                        cubes = Cubes(1, 1, 1, 1, 1, 1),
                        aheadCall = false,
                        isRecyclerFrozen = true,
                        enableRollingDices = true
                    )
                )
            }.subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe()
        )
    }
    fun displayStartingItems(){
        compositeDisposable.add(
            Single.just(
                ListOfItemsModifier.generateStartingItems())
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe({
                    itemsInRecycler_.value = it
                }){
                    throw it
                }
        )
    }
    private fun showToastMessage(){
        this.showToastForGameSaved_.value = true
        this.showToastForGameSaved_.value = false
    }
    fun setupObserverForDataAboutGame(){
        compositeDisposable.add(
            database.getDataAboutRolledCubesDao().getData(1)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(){
                    this.aheadCall = it.aheadCall
                    if(!it.isRecyclerFrozen)
                        unFreezeAllItems()
                }
        )
    }
    override fun reactOnItemClicked(position: Int, clickable : Boolean){
        if(clickable){
            compositeDisposable.add(
                Completable.fromAction {
                    database.getPopUpsDataDao().insertPopUpsData(PopUpsData(id = 1,positionOfItemClicked = position,totalPoints = 0))
                }.subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe(){
                        positioOfLastItemClickedTemp = position
                        isPopUpForEnteringValuesEnabled_.value = true
                        isPopUpForEnteringValuesEnabled_.value = false
                    }
            )
        }
    }
    override fun disposeOfObservers(){
        compositeDisposable.dispose()
    }

    /*    private fun displayStartingTestItems() {
        compositeDisposable.add(
            Single.just(
                ListOfItemsModifier.generateStartingTestItems())
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe({
                    itemsInRecycler_.value = it
                },{
                    throw it
                })
        )
    }*/

}