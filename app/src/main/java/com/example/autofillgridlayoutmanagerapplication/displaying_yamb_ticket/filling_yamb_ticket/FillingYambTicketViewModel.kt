package com.example.autofillgridlayoutmanagerapplication.displaying_yamb_ticket.filling_yamb_ticket

import android.util.Log
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import com.example.autofillgridlayoutmanagerapplication.database.*
import com.example.autofillgridlayoutmanagerapplication.database.entities_and_data_classes.Cubes
import com.example.autofillgridlayoutmanagerapplication.database.entities_and_data_classes.DataAboutRolledCubes
import com.example.autofillgridlayoutmanagerapplication.database.entities_and_data_classes.GameStat
import com.example.autofillgridlayoutmanagerapplication.displaying_yamb_ticket.recyclerAdapter.ItemInGame
import com.example.autofillgridlayoutmanagerapplication.enums_and_interfaces.IHasObservers
import com.example.autofillgridlayoutmanagerapplication.enums_and_interfaces.IViewModelForDisplayingYambTicket
import io.reactivex.Completable
import io.reactivex.Single
import io.reactivex.android.schedulers.AndroidSchedulers
import io.reactivex.disposables.CompositeDisposable
import io.reactivex.schedulers.Schedulers
import java.text.SimpleDateFormat
import java.util.*



class FillingYambTicketViewModel(val database  :GamesPlayedDatabase) : ViewModel() , IViewModelForDisplayingYambTicket, IHasObservers {


    private val  isPopUpForEnteringValuesEnabled_ : MutableLiveData<Boolean> = MutableLiveData(false)
    val isPopUpForEnteringValuesEnabled : LiveData<Boolean>
        get()= isPopUpForEnteringValuesEnabled_

    private val  areDicesRolledTwice_ : MutableLiveData<Boolean> = MutableLiveData()
    val areDicesRolledTwice : LiveData<Boolean>
        get()= areDicesRolledTwice_

    private val itemsInRecycler_ : MutableLiveData<List<ItemInGame>> = MutableLiveData()
    val itemsInRecycler : LiveData<List<ItemInGame>>
        get() = itemsInRecycler_

    private val finishedGame_ = MutableLiveData<Boolean>(false)
    val  finishGameState : LiveData<Boolean>
        get() = finishedGame_

    private val totalPoints_ = MutableLiveData<Int>()
    val  totalPoints : LiveData<Int>
        get() = totalPoints_

    private val showToastForGameSaved_ = MutableLiveData<Boolean>(false)
    val showToastForGameSaved : LiveData<Boolean>
        get() = showToastForGameSaved_

    private val onClickItemPosition_ : MutableLiveData<Int> = MutableLiveData()
    val onClickItemPosition : LiveData<Int>
        get() = onClickItemPosition_

    var diceRolled = listOf<Int>()
    var aheadCall = false
    private val compositeDisposable = CompositeDisposable()
    private var positioOfLastItemClickedTemp = 0
    private var idOfLastInsertedGameStat : Long = 0

    init {
        //generateStartingItems()
        Log.i("starting","init")
        generateStartingTestItems()

    }

    fun savePlayedColumns(){

        compositeDisposable.add(
            Completable.fromAction {
            val listOfObjectsRepresentingColumns = ListOfItemsModifier.getListWithFourObjectsEachRepresentingOneColumn( itemsInRecycler_.value!!,idOfLastInsertedGameStat)
            database.getColumnDao().insertColumns(
                listOfObjectsRepresentingColumns[0],
                listOfObjectsRepresentingColumns[1],
                listOfObjectsRepresentingColumns[2],
                listOfObjectsRepresentingColumns[3],
                listOfObjectsRepresentingColumns[4]
            )
        }.subscribeOn(Schedulers.io())
            .observeOn(AndroidSchedulers.mainThread())
            .subscribe(
                {
                    showToastMessage()
                }
            ){
                throw  it
            }
        )
    }
    fun saveGameStats(){
        compositeDisposable.add(
            Completable.fromAction {
                val calendar = Calendar.getInstance()
                val dateFormat = SimpleDateFormat("MM/dd/yyyy", Locale.ITALY)
                val date = dateFormat.format(calendar.time)
                val totalPoints = GameDataModifier.getTotalPoints(itemsInRecycler_.value!!)
                this.idOfLastInsertedGameStat = database.getGameStatsDao().insertGameStats(GameStat(0, date, totalPoints)) //id is autogenerated
            }.subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe()
        )
    }
    fun changeListOfItemsWhenValueInserted(valueOfItemPicked: Int){
        this.itemsInRecycler_.value = ListOfItemsModifier.getModifiedListWhenValueInserted(onClickItemPosition.value!!, valueOfItemPicked,itemsInRecycler_.value!!)
    }
    fun checkIsGameFinished(){
        if(GameDataModifier.isGameFinished(itemsInRecycler_.value!!))
            changeIsGameFinishedState()
    }
    fun unFreezeAllItems(){
        if(aheadCall)
            this.itemsInRecycler_.value = ListOfItemsModifier.getAheadCallPressedList(itemsInRecycler_.value!!)
        else
            this.itemsInRecycler_.value = ListOfItemsModifier.getUnfreezedList(itemsInRecycler_.value!!)
    }
    fun changePositionOfLastItemClicked(){
        onClickItemPosition_.value = positioOfLastItemClickedTemp
    }
    fun changeIsGameFinishedState(){
        finishedGame_.value =  !finishedGame_.value!!
    }
    fun changeTotalPoints(){
        this.totalPoints_.value = GameDataModifier.getTotalPoints(itemsInRecycler_.value!!)
    }
    fun enableButtonForRollingDices(){
        compositeDisposable.add(
            Completable.fromAction {
                database.getDataAboutRolledCubesDao().insertData(
                    DataAboutRolledCubes(
                        dataRolledCubesId = 1,
                        cubes = Cubes(1, 1, 1, 1, 1, 1),
                        aheadCall = false,
                        isRecyclerFrozen = true,
                        enableButtonForRollingDices = true
                    )
                )
            }.subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe()
        )
    }
    fun generateStartingItems(){
        compositeDisposable.add(
            Single.just(ListOfItemsModifier.generateStartingItems())
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe({
                    itemsInRecycler_.value = it
                }){
                    throw it
                }
        )
    }

    private fun showToastMessage(){
        this.showToastForGameSaved_.value = true
        this.showToastForGameSaved_.value = false
    }
    fun setupObserverForDataAboutGame(){
        compositeDisposable.add(
            database.getDataAboutRolledCubesDao().getData(1)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(){
                    Log.i("starting","observer for data about game")
                    this.areDicesRolledTwice_.value = !it.isRecyclerFrozen
                    if(!it.isRecyclerFrozen){
                        aheadCall = it.aheadCall
                        diceRolled = GameDataModifier.generateDiceRolledWithDataFromDatabase(it.cubes)
                    }
                }
        )

    }


    //za generiranje pocetnog listica pomocu kojeg testiram kraj igre
    private fun generateStartingTestItems() {
      compositeDisposable.add(
          Single.just(ListOfItemsModifier.generateStartingTestItems())
              .subscribeOn(Schedulers.io())
              .observeOn(AndroidSchedulers.mainThread())
              .subscribe({
                  Log.i("starting","statrting items : $it")
                  itemsInRecycler_.value = it
              },{
                  throw it
              })
      )
    }

    override fun changeIsPopUpDialogEnabledState(position: Int,clickable : Boolean){
        if(clickable){
            positioOfLastItemClickedTemp = position
            isPopUpForEnteringValuesEnabled_.value = true
            isPopUpForEnteringValuesEnabled_.value = false
        }

    }
    override fun disposeOfObservers(){
        compositeDisposable.dispose()
    }

}